// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod template {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        #[derive(Clone)]
        pub struct ProductItem {
          pub product_id: wit_bindgen::rt::string::String,
          pub name: wit_bindgen::rt::string::String,
          pub price: f32,
          pub quantity: u32,
        }
        impl ::core::fmt::Debug for ProductItem {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("ProductItem").field("product-id", &self.product_id).field("name", &self.name).field("price", &self.price).field("quantity", &self.quantity).finish()
          }
        }
        #[derive(Clone)]
        pub struct OrderConfirmation {
          pub order_id: wit_bindgen::rt::string::String,
        }
        impl ::core::fmt::Debug for OrderConfirmation {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("OrderConfirmation").field("order-id", &self.order_id).finish()
          }
        }
        #[derive(Clone)]
        pub enum CheckoutResult{
          Error(wit_bindgen::rt::string::String),
          Success(OrderConfirmation),
        }
        impl ::core::fmt::Debug for CheckoutResult {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              CheckoutResult::Error(e) => {
                f.debug_tuple("CheckoutResult::Error").field(e).finish()
              }
              CheckoutResult::Success(e) => {
                f.debug_tuple("CheckoutResult::Success").field(e).finish()
              }
            }
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#initialize-cart"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_initialize_cart(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            <_GuestImpl as Guest>::initialize_cart(wit_bindgen::rt::string_lift(bytes0));
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#add-item"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_item(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: f32,arg5: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let len1 = arg3 as usize;
            let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
            let result2 = <_GuestImpl as Guest>::add_item(ProductItem{
              product_id: wit_bindgen::rt::string_lift(bytes0),
              name: wit_bindgen::rt::string_lift(bytes1),
              price: arg4,
              quantity: arg5 as u32,
            });
            let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
            match result2 {
              Some(e) => {
                *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                *((ptr3 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
              },
              None => {
                {
                  *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr3
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#add-item-result"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_item_result(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: f32,arg6: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result3 = <_GuestImpl as Guest>::add_item_result(match arg0 {
              0 => {
                let e = {
                  let len0 = arg2 as usize;
                  let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                  let len1 = arg4 as usize;
                  let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                  
                  ProductItem{
                    product_id: wit_bindgen::rt::string_lift(bytes0),
                    name: wit_bindgen::rt::string_lift(bytes1),
                    price: arg5,
                    quantity: arg6 as u32,
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let len2 = arg2 as usize;
                  let bytes2 = Vec::from_raw_parts(arg1 as *mut _, len2, len2);
                  
                  wit_bindgen::rt::string_lift(bytes2)
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
            let ptr4 = _RET_AREA.0.as_mut_ptr() as i32;
            match result3 {
              Some(e) => {
                *((ptr4 + 0) as *mut u8) = (1i32) as u8;
                *((ptr4 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
              },
              None => {
                {
                  *((ptr4 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr4
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#add-item-option"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_item_option(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: f32,arg6: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result2 = <_GuestImpl as Guest>::add_item_option(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let len0 = arg2 as usize;
                  let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                  let len1 = arg4 as usize;
                  let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                  
                  ProductItem{
                    product_id: wit_bindgen::rt::string_lift(bytes0),
                    name: wit_bindgen::rt::string_lift(bytes1),
                    price: arg5,
                    quantity: arg6 as u32,
                  }
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
            let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
            match result2 {
              Some(e) => {
                *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                *((ptr3 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
              },
              None => {
                {
                  *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr3
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#add-item-failed"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_item_failed(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: f32,arg5: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let len1 = arg3 as usize;
            let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
            let result2 = <_GuestImpl as Guest>::add_item_failed(ProductItem{
              product_id: wit_bindgen::rt::string_lift(bytes0),
              name: wit_bindgen::rt::string_lift(bytes1),
              price: arg4,
              quantity: arg5 as u32,
            });
            let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
            match result2 {
              Some(e) => {
                *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                *((ptr3 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
              },
              None => {
                {
                  *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr3
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#remove-item"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_remove_item(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_GuestImpl as Guest>::remove_item(wit_bindgen::rt::string_lift(bytes0));
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            match result1 {
              Ok(e) => { {
                *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr2 + 8) as *mut i32) = len3;
                *((ptr2 + 4) as *mut i32) = ptr3;
              } },
              Err(e) => { {
                *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr2 + 8) as *mut i32) = len4;
                *((ptr2 + 4) as *mut i32) = ptr4;
              } },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:template/api#remove-item"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_remove_item(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#remove-item-fail"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_remove_item_fail(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_GuestImpl as Guest>::remove_item_fail(wit_bindgen::rt::string_lift(bytes0));
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            match result1 {
              Ok(e) => { {
                *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr2 + 8) as *mut i32) = len3;
                *((ptr2 + 4) as *mut i32) = ptr3;
              } },
              Err(e) => { {
                *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr2 + 8) as *mut i32) = len4;
                *((ptr2 + 4) as *mut i32) = ptr4;
              } },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:template/api#remove-item-fail"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_remove_item_fail(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#update-item-quantity"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_update_item_quantity(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            <_GuestImpl as Guest>::update_item_quantity(wit_bindgen::rt::string_lift(bytes0), arg2 as u32);
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#checkout"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_checkout() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::checkout();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              CheckoutResult::Error(e) => {
                *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                let vec2 = (e.into_bytes()).into_boxed_slice();
                let ptr2 = vec2.as_ptr() as i32;
                let len2 = vec2.len() as i32;
                ::core::mem::forget(vec2);
                *((ptr1 + 8) as *mut i32) = len2;
                *((ptr1 + 4) as *mut i32) = ptr2;
              },
              CheckoutResult::Success(e) => {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let OrderConfirmation{ order_id:order_id3, } = e;
                let vec4 = (order_id3.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr1 + 8) as *mut i32) = len4;
                *((ptr1 + 4) as *mut i32) = ptr4;
              },
            }
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:template/api#checkout"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_checkout(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#get-cart-contents"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_cart_contents() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_cart_contents();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec5 = result0;
            let len5 = vec5.len() as i32;
            let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 4);
            let result5 = if layout5.size() != 0
            {
              let ptr = alloc::alloc(layout5);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout5);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec5.into_iter().enumerate() {
              let base = result5 as i32 + (i as i32) * 24;
              {
                let ProductItem{ product_id:product_id2, name:name2, price:price2, quantity:quantity2, } = e;
                let vec3 = (product_id2.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((base + 4) as *mut i32) = len3;
                *((base + 0) as *mut i32) = ptr3;
                let vec4 = (name2.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((base + 12) as *mut i32) = len4;
                *((base + 8) as *mut i32) = ptr4;
                *((base + 16) as *mut f32) = wit_bindgen::rt::as_f32(price2);
                *((base + 20) as *mut i32) = wit_bindgen::rt::as_i32(quantity2);
              }
            }
            *((ptr1 + 4) as *mut i32) = len5;
            *((ptr1 + 0) as *mut i32) = result5 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:template/api#get-cart-contents"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_cart_contents(arg0: i32,) {
              let l4 = *((arg0 + 0) as *const i32);
              let l5 = *((arg0 + 4) as *const i32);
              let base6 = l4;
              let len6 = l5;
              for i in 0..len6 {
                let base = base6 + i *24;
                {
                  let l0 = *((base + 0) as *const i32);
                  let l1 = *((base + 4) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                  let l2 = *((base + 8) as *const i32);
                  let l3 = *((base + 12) as *const i32);
                  wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                }
              }
              wit_bindgen::rt::dealloc(base6, (len6 as usize) * 24, 4);
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#get-cart-contents-failed"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_cart_contents_failed() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_cart_contents_failed();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Ok(e) => { {
                *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                let vec5 = e;
                let len5 = vec5.len() as i32;
                let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 4);
                let result5 = if layout5.size() != 0
                {
                  let ptr = alloc::alloc(layout5);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout5);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec5.into_iter().enumerate() {
                  let base = result5 as i32 + (i as i32) * 24;
                  {
                    let ProductItem{ product_id:product_id2, name:name2, price:price2, quantity:quantity2, } = e;
                    let vec3 = (product_id2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((base + 4) as *mut i32) = len3;
                    *((base + 0) as *mut i32) = ptr3;
                    let vec4 = (name2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((base + 12) as *mut i32) = len4;
                    *((base + 8) as *mut i32) = ptr4;
                    *((base + 16) as *mut f32) = wit_bindgen::rt::as_f32(price2);
                    *((base + 20) as *mut i32) = wit_bindgen::rt::as_i32(quantity2);
                  }
                }
                *((ptr1 + 8) as *mut i32) = len5;
                *((ptr1 + 4) as *mut i32) = result5 as i32;
              } },
              Err(e) => { {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let vec6 = (e.into_bytes()).into_boxed_slice();
                let ptr6 = vec6.as_ptr() as i32;
                let len6 = vec6.len() as i32;
                ::core::mem::forget(vec6);
                *((ptr1 + 8) as *mut i32) = len6;
                *((ptr1 + 4) as *mut i32) = ptr6;
              } },
            };ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:template/api#get-cart-contents-failed"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_cart_contents_failed(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l5 = *((arg0 + 4) as *const i32);
                  let l6 = *((arg0 + 8) as *const i32);
                  let base7 = l5;
                  let len7 = l6;
                  for i in 0..len7 {
                    let base = base7 + i *24;
                    {
                      let l1 = *((base + 0) as *const i32);
                      let l2 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                      let l3 = *((base + 8) as *const i32);
                      let l4 = *((base + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                    }
                  }
                  wit_bindgen::rt::dealloc(base7, (len7 as usize) * 24, 4);
                },
                _ => {
                  let l8 = *((arg0 + 4) as *const i32);
                  let l9 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l8, (l9) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#get-cart-contents-option-some"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_cart_contents_option_some() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_cart_contents_option_some();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Some(e) => {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
              },
              None => {
                {
                  *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr1
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:template/api#get-cart-contents-option-none"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_cart_contents_option_none() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_cart_contents_option_none();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Some(e) => {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                *((ptr1 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
              },
              None => {
                {
                  *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr1
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn initialize_cart(user_id: wit_bindgen::rt::string::String,);
          fn add_item(item: ProductItem,) -> Option<u32>;
          fn add_item_result(item: Result<ProductItem,wit_bindgen::rt::string::String>,) -> Option<u32>;
          fn add_item_option(item: Option<ProductItem>,) -> Option<u32>;
          fn add_item_failed(item: ProductItem,) -> Option<u32>;
          fn remove_item(product_id: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          fn remove_item_fail(product_id: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          fn update_item_quantity(product_id: wit_bindgen::rt::string::String,quantity: u32,);
          fn checkout() -> CheckoutResult;
          fn get_cart_contents() -> wit_bindgen::rt::vec::Vec::<ProductItem>;
          fn get_cart_contents_failed() -> Result<wit_bindgen::rt::vec::Vec::<ProductItem>,wit_bindgen::rt::string::String>;
          fn get_cart_contents_option_some() -> Option<u32>;
          fn get_cart_contents_option_none() -> Option<u32>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:shopping-cart"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1468] = [3, 0, 13, 115, 104, 111, 112, 112, 105, 110, 103, 45, 99, 97, 114, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 128, 5, 1, 65, 2, 1, 66, 37, 1, 114, 4, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 4, 110, 97, 109, 101, 115, 5, 112, 114, 105, 99, 101, 118, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 4, 0, 12, 112, 114, 111, 100, 117, 99, 116, 45, 105, 116, 101, 109, 3, 0, 0, 1, 112, 1, 1, 114, 4, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 5, 105, 116, 101, 109, 115, 2, 5, 116, 111, 116, 97, 108, 118, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 3, 1, 114, 1, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 4, 0, 18, 111, 114, 100, 101, 114, 45, 99, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 3, 0, 5, 1, 113, 2, 5, 101, 114, 114, 111, 114, 1, 115, 0, 7, 115, 117, 99, 99, 101, 115, 115, 1, 6, 0, 4, 0, 15, 99, 104, 101, 99, 107, 111, 117, 116, 45, 114, 101, 115, 117, 108, 116, 3, 0, 7, 1, 64, 1, 7, 117, 115, 101, 114, 45, 105, 100, 115, 1, 0, 4, 0, 15, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 99, 97, 114, 116, 1, 9, 1, 107, 121, 1, 64, 1, 4, 105, 116, 101, 109, 1, 0, 10, 4, 0, 8, 97, 100, 100, 45, 105, 116, 101, 109, 1, 11, 1, 106, 1, 1, 1, 115, 1, 64, 1, 4, 105, 116, 101, 109, 12, 0, 10, 4, 0, 15, 97, 100, 100, 45, 105, 116, 101, 109, 45, 114, 101, 115, 117, 108, 116, 1, 13, 1, 107, 1, 1, 64, 1, 4, 105, 116, 101, 109, 14, 0, 10, 4, 0, 15, 97, 100, 100, 45, 105, 116, 101, 109, 45, 111, 112, 116, 105, 111, 110, 1, 15, 4, 0, 15, 97, 100, 100, 45, 105, 116, 101, 109, 45, 102, 97, 105, 108, 101, 100, 1, 11, 1, 106, 1, 115, 1, 115, 1, 64, 1, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 0, 16, 4, 0, 11, 114, 101, 109, 111, 118, 101, 45, 105, 116, 101, 109, 1, 17, 4, 0, 16, 114, 101, 109, 111, 118, 101, 45, 105, 116, 101, 109, 45, 102, 97, 105, 108, 1, 17, 1, 64, 2, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 1, 0, 4, 0, 20, 117, 112, 100, 97, 116, 101, 45, 105, 116, 101, 109, 45, 113, 117, 97, 110, 116, 105, 116, 121, 1, 18, 1, 64, 0, 0, 8, 4, 0, 8, 99, 104, 101, 99, 107, 111, 117, 116, 1, 19, 1, 64, 0, 0, 2, 4, 0, 17, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 1, 20, 1, 106, 1, 2, 1, 115, 1, 64, 0, 0, 21, 4, 0, 24, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 45, 102, 97, 105, 108, 101, 100, 1, 22, 1, 64, 0, 0, 10, 4, 0, 29, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 45, 111, 112, 116, 105, 111, 110, 45, 115, 111, 109, 101, 1, 23, 4, 0, 29, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 45, 111, 112, 116, 105, 111, 110, 45, 110, 111, 110, 101, 1, 23, 4, 1, 18, 103, 111, 108, 101, 109, 58, 116, 101, 109, 112, 108, 97, 116, 101, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 164, 5, 1, 65, 2, 1, 65, 2, 1, 66, 37, 1, 114, 4, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 4, 110, 97, 109, 101, 115, 5, 112, 114, 105, 99, 101, 118, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 4, 0, 12, 112, 114, 111, 100, 117, 99, 116, 45, 105, 116, 101, 109, 3, 0, 0, 1, 112, 1, 1, 114, 4, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 5, 105, 116, 101, 109, 115, 2, 5, 116, 111, 116, 97, 108, 118, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 3, 1, 114, 1, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 4, 0, 18, 111, 114, 100, 101, 114, 45, 99, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 3, 0, 5, 1, 113, 2, 5, 101, 114, 114, 111, 114, 1, 115, 0, 7, 115, 117, 99, 99, 101, 115, 115, 1, 6, 0, 4, 0, 15, 99, 104, 101, 99, 107, 111, 117, 116, 45, 114, 101, 115, 117, 108, 116, 3, 0, 7, 1, 64, 1, 7, 117, 115, 101, 114, 45, 105, 100, 115, 1, 0, 4, 0, 15, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 99, 97, 114, 116, 1, 9, 1, 107, 121, 1, 64, 1, 4, 105, 116, 101, 109, 1, 0, 10, 4, 0, 8, 97, 100, 100, 45, 105, 116, 101, 109, 1, 11, 1, 106, 1, 1, 1, 115, 1, 64, 1, 4, 105, 116, 101, 109, 12, 0, 10, 4, 0, 15, 97, 100, 100, 45, 105, 116, 101, 109, 45, 114, 101, 115, 117, 108, 116, 1, 13, 1, 107, 1, 1, 64, 1, 4, 105, 116, 101, 109, 14, 0, 10, 4, 0, 15, 97, 100, 100, 45, 105, 116, 101, 109, 45, 111, 112, 116, 105, 111, 110, 1, 15, 4, 0, 15, 97, 100, 100, 45, 105, 116, 101, 109, 45, 102, 97, 105, 108, 101, 100, 1, 11, 1, 106, 1, 115, 1, 115, 1, 64, 1, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 0, 16, 4, 0, 11, 114, 101, 109, 111, 118, 101, 45, 105, 116, 101, 109, 1, 17, 4, 0, 16, 114, 101, 109, 111, 118, 101, 45, 105, 116, 101, 109, 45, 102, 97, 105, 108, 1, 17, 1, 64, 2, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 1, 0, 4, 0, 20, 117, 112, 100, 97, 116, 101, 45, 105, 116, 101, 109, 45, 113, 117, 97, 110, 116, 105, 116, 121, 1, 18, 1, 64, 0, 0, 8, 4, 0, 8, 99, 104, 101, 99, 107, 111, 117, 116, 1, 19, 1, 64, 0, 0, 2, 4, 0, 17, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 1, 20, 1, 106, 1, 2, 1, 115, 1, 64, 0, 0, 21, 4, 0, 24, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 45, 102, 97, 105, 108, 101, 100, 1, 22, 1, 64, 0, 0, 10, 4, 0, 29, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 45, 111, 112, 116, 105, 111, 110, 45, 115, 111, 109, 101, 1, 23, 4, 0, 29, 103, 101, 116, 45, 99, 97, 114, 116, 45, 99, 111, 110, 116, 101, 110, 116, 115, 45, 111, 112, 116, 105, 111, 110, 45, 110, 111, 110, 101, 1, 23, 4, 1, 18, 103, 111, 108, 101, 109, 58, 116, 101, 109, 112, 108, 97, 116, 101, 47, 97, 112, 105, 5, 0, 4, 1, 28, 103, 111, 108, 101, 109, 58, 116, 101, 109, 112, 108, 97, 116, 101, 47, 115, 104, 111, 112, 112, 105, 110, 103, 45, 99, 97, 114, 116, 4, 0, 11, 19, 1, 0, 13, 115, 104, 111, 112, 112, 105, 110, 103, 45, 99, 97, 114, 116, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
