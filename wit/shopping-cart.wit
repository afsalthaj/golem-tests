package golem:template;

interface api {
  record product-item {
    product-id: string,
    name: string,
    price: float32,
    quantity: u32,
  }

  record order {
    order-id: string,
    items: list<product-item>,
    total: float32,
    timestamp: u64,
  }

  record order-confirmation {
    order-id: string,
  }

  variant checkout-result {
    error(string),
    success(order-confirmation),
  }

  initialize-cart: func(user-id: string) -> ();

  add-item: func(item: product-item) -> option<u32>;

  add-item-result: func(item: result<product-item, string>) -> option<u32>;

  add-item-option: func(item: option<product-item>) -> option<u32>;

  add-item-failed: func(item: product-item) -> option<u32>;

  remove-item: func(product-id: string) -> result<string, string>;

  remove-item-fail: func(product-id: string) -> result<string, string>;

  update-item-quantity: func(product-id: string, quantity: u32) -> ();

  checkout: func() -> checkout-result;

  get-cart-contents: func() -> list<product-item>;

  get-cart-contents-failed: func() -> result<list<product-item>, string>;

  get-cart-contents-option-some: func() -> option<u32>;

  get-cart-contents-option-none: func() -> option<u32>;

}

world shopping-cart {
  export api;
}